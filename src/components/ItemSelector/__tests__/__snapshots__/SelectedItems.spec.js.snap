// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The SelectedItems component list with items matches the snapshot with list has items 1`] = `
<SelectedItems
  items={
    Array [
      Object {
        "id": "rb",
        "name": "rainbow",
      },
      Object {
        "id": "rr",
        "name": "rarity",
      },
    ]
  }
  onDeselect={[MockFunction]}
  onReorder={[MockFunction]}
>
  <Subtitle>
    <div
      className="subtitle-container"
    >
      <span
        className="subtitle-text"
      >
        Selected Data
      </span>
      <style />
    </div>
  </Subtitle>
  <DragDropContext
    onDragEnd={[Function]}
    onDragStart={[Function]}
  >
    <ErrorBoundary
      onError={[Function]}
    >
      <Connect(Droppable)
        direction="vertical"
        droppableId="selected-items-droppable"
        ignoreContainerClipping={false}
        isCombineEnabled={false}
        isDropDisabled={false}
        type="DEFAULT"
      >
        <Droppable
          direction="vertical"
          droppableId="selected-items-droppable"
          ignoreContainerClipping={false}
          isCombineEnabled={false}
          isDropDisabled={false}
          placeholder={null}
          shouldAnimatePlaceholder={true}
          snapshot={
            Object {
              "draggingFromThisWith": null,
              "draggingOverWith": null,
              "isDraggingOver": false,
            }
          }
          type="DEFAULT"
          updateViewportMaxScroll={[Function]}
        >
          <DroppableDimensionPublisher
            direction="vertical"
            droppableId="selected-items-droppable"
            getDroppableRef={[Function]}
            getPlaceholderRef={[Function]}
            ignoreContainerClipping={false}
            isCombineEnabled={false}
            isDropDisabled={false}
            type="DEFAULT"
          >
            <ItemsList
              data-react-beautiful-dnd-droppable="1"
              dataTest="undefined-list"
              innerRef={[Function]}
            >
              <ul
                className="selected-list"
                data-test="undefined-list"
              >
                <Connect(Draggable)
                  disableInteractiveElementBlocking={false}
                  draggableId="rb"
                  index={0}
                  isDragDisabled={false}
                  key="rb"
                  shouldRespectForceTouch={true}
                >
                  <Draggable
                    disableInteractiveElementBlocking={false}
                    draggableId="rb"
                    drop={[Function]}
                    dropAnimationFinished={[Function]}
                    index={0}
                    isDragDisabled={false}
                    lift={[Function]}
                    mapped={
                      Object {
                        "combineTargetFor": null,
                        "offset": Object {
                          "x": 0,
                          "y": 0,
                        },
                        "shouldAnimateDisplacement": true,
                        "snapshot": Object {
                          "combineTargetFor": null,
                          "combineWith": null,
                          "draggingOver": null,
                          "dropAnimation": null,
                          "isDragging": false,
                          "isDropAnimating": false,
                          "mode": null,
                        },
                        "type": "SECONDARY",
                      }
                    }
                    move={[Function]}
                    moveByWindowScroll={[Function]}
                    moveDown={[Function]}
                    moveLeft={[Function]}
                    moveRight={[Function]}
                    moveUp={[Function]}
                    shouldRespectForceTouch={true}
                  >
                    <DraggableDimensionPublisher
                      draggableId="rb"
                      droppableId="selected-items-droppable"
                      getDraggableRef={[Function]}
                      index={0}
                      key="rb"
                      type="DEFAULT"
                    >
                      <DragHandle
                        callbacks={
                          Object {
                            "onCancel": [Function],
                            "onDrop": [Function],
                            "onLift": [Function],
                            "onMove": [Function],
                            "onMoveDown": [Function],
                            "onMoveLeft": [Function],
                            "onMoveRight": [Function],
                            "onMoveUp": [Function],
                            "onWindowScroll": [Function],
                          }
                        }
                        canDragInteractiveElements={false}
                        draggableId="rb"
                        getDraggableRef={[Function]}
                        getShouldRespectForceTouch={[Function]}
                        isDragging={false}
                        isDropAnimating={false}
                        isEnabled={true}
                      >
                        <li
                          aria-roledescription="Draggable item. Press space bar to lift"
                          className="selected-list-item"
                          data-react-beautiful-dnd-drag-handle="1"
                          data-react-beautiful-dnd-draggable="1"
                          data-test="undefined-list-item"
                          draggable={false}
                          id="rb"
                          onBlur={[Function]}
                          onDoubleClick={[Function]}
                          onDragStart={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchStart={[Function]}
                          onTransitionEnd={null}
                          style={
                            Object {
                              "transform": null,
                              "transition": null,
                            }
                          }
                          tabIndex={0}
                        >
                          <Item
                            active={true}
                            ghost={false}
                            highlighted={false}
                            id="rb"
                            index={0}
                            name="rainbow"
                            onClick={[Function]}
                            onRemoveItem={[Function]}
                          >
                            <div
                              className="item selected-item"
                              data-test="dimension-item-rb"
                              onClick={[Function]}
                            >
                              <ItemIcon
                                backgroundColor="#00796b"
                              >
                                <div>
                                  <style>
                                    
                div {
                    background-color: #00796b;
                    min-height: 6px;
                    min-width: 6px;
                    margin: 0px 5px;
                }
            
                                  </style>
                                </div>
                              </ItemIcon>
                              <span
                                className="item-label"
                              >
                                rainbow
                              </span>
                              <DeselectIconButton
                                fill="#00796b"
                                onClick={[Function]}
                              >
                                <button
                                  className="deselect-icon-button"
                                  onClick={[Function]}
                                >
                                  <span
                                    style={
                                      Object {
                                        "fill": "#00796b",
                                        "height": "13px",
                                        "width": "10px",
                                      }
                                    }
                                  >
                                    <SvgCross16>
                                      <svg
                                        height={16}
                                        viewBox="0 0 16 16"
                                        width={16}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M4.284 3.589l.07.057L8 7.293l3.646-3.647a.5.5 0 01.765.638l-.057.07L8.707 8l3.647 3.646a.5.5 0 01-.638.765l-.07-.057L8 8.707l-3.646 3.647a.5.5 0 01-.765-.638l.057-.07L7.293 8 3.646 4.354a.5.5 0 01.638-.765z"
                                          fill="currentColor"
                                        />
                                      </svg>
                                    </SvgCross16>
                                  </span>
                                  <style />
                                </button>
                              </DeselectIconButton>
                              <style />
                            </div>
                          </Item>
                          <style />
                        </li>
                      </DragHandle>
                    </DraggableDimensionPublisher>
                  </Draggable>
                </Connect(Draggable)>
                <Connect(Draggable)
                  disableInteractiveElementBlocking={false}
                  draggableId="rr"
                  index={1}
                  isDragDisabled={false}
                  key="rr"
                  shouldRespectForceTouch={true}
                >
                  <Draggable
                    disableInteractiveElementBlocking={false}
                    draggableId="rr"
                    drop={[Function]}
                    dropAnimationFinished={[Function]}
                    index={1}
                    isDragDisabled={false}
                    lift={[Function]}
                    mapped={
                      Object {
                        "combineTargetFor": null,
                        "offset": Object {
                          "x": 0,
                          "y": 0,
                        },
                        "shouldAnimateDisplacement": true,
                        "snapshot": Object {
                          "combineTargetFor": null,
                          "combineWith": null,
                          "draggingOver": null,
                          "dropAnimation": null,
                          "isDragging": false,
                          "isDropAnimating": false,
                          "mode": null,
                        },
                        "type": "SECONDARY",
                      }
                    }
                    move={[Function]}
                    moveByWindowScroll={[Function]}
                    moveDown={[Function]}
                    moveLeft={[Function]}
                    moveRight={[Function]}
                    moveUp={[Function]}
                    shouldRespectForceTouch={true}
                  >
                    <DraggableDimensionPublisher
                      draggableId="rr"
                      droppableId="selected-items-droppable"
                      getDraggableRef={[Function]}
                      index={1}
                      key="rr"
                      type="DEFAULT"
                    >
                      <DragHandle
                        callbacks={
                          Object {
                            "onCancel": [Function],
                            "onDrop": [Function],
                            "onLift": [Function],
                            "onMove": [Function],
                            "onMoveDown": [Function],
                            "onMoveLeft": [Function],
                            "onMoveRight": [Function],
                            "onMoveUp": [Function],
                            "onWindowScroll": [Function],
                          }
                        }
                        canDragInteractiveElements={false}
                        draggableId="rr"
                        getDraggableRef={[Function]}
                        getShouldRespectForceTouch={[Function]}
                        isDragging={false}
                        isDropAnimating={false}
                        isEnabled={true}
                      >
                        <li
                          aria-roledescription="Draggable item. Press space bar to lift"
                          className="selected-list-item"
                          data-react-beautiful-dnd-drag-handle="1"
                          data-react-beautiful-dnd-draggable="1"
                          data-test="undefined-list-item"
                          draggable={false}
                          id="rr"
                          onBlur={[Function]}
                          onDoubleClick={[Function]}
                          onDragStart={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchStart={[Function]}
                          onTransitionEnd={null}
                          style={
                            Object {
                              "transform": null,
                              "transition": null,
                            }
                          }
                          tabIndex={0}
                        >
                          <Item
                            active={true}
                            ghost={false}
                            highlighted={false}
                            id="rr"
                            index={1}
                            name="rarity"
                            onClick={[Function]}
                            onRemoveItem={[Function]}
                          >
                            <div
                              className="item selected-item"
                              data-test="dimension-item-rr"
                              onClick={[Function]}
                            >
                              <ItemIcon
                                backgroundColor="#00796b"
                              >
                                <div>
                                  <style>
                                    
                div {
                    background-color: #00796b;
                    min-height: 6px;
                    min-width: 6px;
                    margin: 0px 5px;
                }
            
                                  </style>
                                </div>
                              </ItemIcon>
                              <span
                                className="item-label"
                              >
                                rarity
                              </span>
                              <DeselectIconButton
                                fill="#00796b"
                                onClick={[Function]}
                              >
                                <button
                                  className="deselect-icon-button"
                                  onClick={[Function]}
                                >
                                  <span
                                    style={
                                      Object {
                                        "fill": "#00796b",
                                        "height": "13px",
                                        "width": "10px",
                                      }
                                    }
                                  >
                                    <SvgCross16>
                                      <svg
                                        height={16}
                                        viewBox="0 0 16 16"
                                        width={16}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M4.284 3.589l.07.057L8 7.293l3.646-3.647a.5.5 0 01.765.638l-.057.07L8.707 8l3.647 3.646a.5.5 0 01-.638.765l-.07-.057L8 8.707l-3.646 3.647a.5.5 0 01-.765-.638l.057-.07L7.293 8 3.646 4.354a.5.5 0 01.638-.765z"
                                          fill="currentColor"
                                        />
                                      </svg>
                                    </SvgCross16>
                                  </span>
                                  <style />
                                </button>
                              </DeselectIconButton>
                              <style />
                            </div>
                          </Item>
                          <style />
                        </li>
                      </DragHandle>
                    </DraggableDimensionPublisher>
                  </Draggable>
                </Connect(Draggable)>
                <AnimateInOut
                  on={null}
                  shouldAnimate={true}
                />
                <style />
              </ul>
            </ItemsList>
          </DroppableDimensionPublisher>
        </Droppable>
      </Connect(Droppable)>
    </ErrorBoundary>
  </DragDropContext>
  <div
    className="deselect-all-button"
  >
    <Button
      dataTest="undefined-deselect-all-button"
      onClick={[Function]}
      type="button"
    >
      <button
        className="jsx-2371629422 "
        data-test="undefined-deselect-all-button"
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        type="button"
      >
        Deselect All
        <JSXStyle
          id="2371629422"
        />
      </button>
    </Button>
  </div>
  <div
    className="deselect-highlighted-button"
  >
    <ArrowButton
      iconType="arrowBack"
      onClick={[Function]}
    >
      <button
        className="arrow-button"
        onClick={[Function]}
      >
        <span
          className="arrow-icon"
        >
          <SvgArrowLeft24>
            <svg
              height={24}
              viewBox="0 0 24 24"
              width={24}
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M11.707 5.293a1 1 0 01.083 1.32l-.083.094L7.414 11H18a1 1 0 01.117 1.993L18 13H7.414l4.293 4.293a1 1 0 01.083 1.32l-.083.094a1 1 0 01-1.32.083l-.094-.083-6-6-.073-.082a1.005 1.005 0 01-.007-.008l.08.09A1.008 1.008 0 014 12.02v-.037c0-.024.002-.048.004-.071L4 12a1.008 1.008 0 01.21-.613c.028-.035.054-.066.083-.094l6-6a1 1 0 011.414 0z"
                fill="currentColor"
              />
            </svg>
          </SvgArrowLeft24>
        </span>
        <style />
      </button>
    </ArrowButton>
  </div>
  <style />
</SelectedItems>
`;

exports[`The SelectedItems component matches the snapshot when list is empty 1`] = `
<SelectedItems
  items={Array []}
  onDeselect={[MockFunction]}
  onReorder={[MockFunction]}
>
  <Subtitle>
    <div
      className="subtitle-container"
    >
      <span
        className="subtitle-text"
      >
        Selected Data
      </span>
      <style />
    </div>
  </Subtitle>
  <DragDropContext
    onDragEnd={[Function]}
    onDragStart={[Function]}
  >
    <ErrorBoundary
      onError={[Function]}
    >
      <Connect(Droppable)
        direction="vertical"
        droppableId="selected-items-droppable"
        ignoreContainerClipping={false}
        isCombineEnabled={false}
        isDropDisabled={false}
        type="DEFAULT"
      >
        <Droppable
          direction="vertical"
          droppableId="selected-items-droppable"
          ignoreContainerClipping={false}
          isCombineEnabled={false}
          isDropDisabled={false}
          placeholder={null}
          shouldAnimatePlaceholder={true}
          snapshot={
            Object {
              "draggingFromThisWith": null,
              "draggingOverWith": null,
              "isDraggingOver": false,
            }
          }
          type="DEFAULT"
          updateViewportMaxScroll={[Function]}
        >
          <DroppableDimensionPublisher
            direction="vertical"
            droppableId="selected-items-droppable"
            getDroppableRef={[Function]}
            getPlaceholderRef={[Function]}
            ignoreContainerClipping={false}
            isCombineEnabled={false}
            isDropDisabled={false}
            type="DEFAULT"
          >
            <ItemsList
              data-react-beautiful-dnd-droppable="0"
              dataTest="undefined-list"
              innerRef={[Function]}
            >
              <ul
                className="selected-list"
                data-test="undefined-list"
              >
                <AnimateInOut
                  on={null}
                  shouldAnimate={true}
                />
                <style />
              </ul>
            </ItemsList>
          </DroppableDimensionPublisher>
        </Droppable>
      </Connect(Droppable)>
    </ErrorBoundary>
  </DragDropContext>
  <div
    className="deselect-all-button"
  >
    <Button
      dataTest="undefined-deselect-all-button"
      onClick={[Function]}
      type="button"
    >
      <button
        className="jsx-2371629422 "
        data-test="undefined-deselect-all-button"
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        type="button"
      >
        Deselect All
        <JSXStyle
          id="2371629422"
        />
      </button>
    </Button>
  </div>
  <div
    className="deselect-highlighted-button"
  >
    <ArrowButton
      iconType="arrowBack"
      onClick={[Function]}
    >
      <button
        className="arrow-button"
        onClick={[Function]}
      >
        <span
          className="arrow-icon"
        >
          <SvgArrowLeft24>
            <svg
              height={24}
              viewBox="0 0 24 24"
              width={24}
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M11.707 5.293a1 1 0 01.083 1.32l-.083.094L7.414 11H18a1 1 0 01.117 1.993L18 13H7.414l4.293 4.293a1 1 0 01.083 1.32l-.083.094a1 1 0 01-1.32.083l-.094-.083-6-6-.073-.082a1.005 1.005 0 01-.007-.008l.08.09A1.008 1.008 0 014 12.02v-.037c0-.024.002-.048.004-.071L4 12a1.008 1.008 0 01.21-.613c.028-.035.054-.066.083-.094l6-6a1 1 0 011.414 0z"
                fill="currentColor"
              />
            </svg>
          </SvgArrowLeft24>
        </span>
        <style />
      </button>
    </ArrowButton>
  </div>
  <style />
</SelectedItems>
`;
